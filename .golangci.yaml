# options for analysis running
run:
  # timeout for analysis, e.g. 30s, 5m, default is 1m
  deadline: 2m

issues:
  # Only report issues for changes since master
  new-from-rev: origin/master

# output configuration options
output:
  # colored-line-number|line-number|json|tab|checkstyle|code-climate, default is "colored-line-number"
  format: colored-line-number

linters-settings:
  errcheck:
    # report about not checking of errors in type assertions: `a := b.(MyStruct)`;
    # default is false: such cases aren't reported by default.
    check-type-assertions: true

  # Function length check
  funlen:
    lines: 60
    statements: 40

  # Report deeply nested if statements
  nestif:
    # minimal complexity of if statements to report, 5 by default
    min-complexity: 4

  gofmt:
    # simplify code: gofmt with `-s` option, true by default
    simplify: true

  golint:
    # minimal confidence for issues, default is 0.8
    min-confidence: 0.8

  govet:
    # report about shadowed variables
    check-shadowing: true
    enable-all: true
    disable:
      # Do not check field memory alignment because in most cases the performance gain is not worth the headache
      - fieldalignment

linters:
  # Disable the default linters so we can explicitly name the linters we want
  disable-all: true

  # List of enabled linters
  enable:
    #####################
    # Default linters
    #####################
    - gofmt
    # Checks error handling
    - errcheck
    # Checks deadcode
    - deadcode
    # Linter for Go source code that specializes in simplifying a code
    - gosimple
    # Vet examines Go source code and reports suspicious constructs, such as Printf calls whose
    # arguments do not align with the format string
    - govet
    # Detects when assignments to existing variables are not used
    - ineffassign
    # Static code analytics
    - staticcheck
    # Finds unused struct fields
    - structcheck
